#!/usr/local/bin/ruby
# Move a customer to a new distribution tower.
require 'wikk_configuration'
require 'wikk_sql'
require 'optparse'
require 'optparse/time'

load '/wikk/etc/wikk.conf' unless defined? WIKK_CONF
require_relative "#{RLIB}/customer/customer.rb"

VERSION = '1.1.0'

def parse_args(argv: ARGV)
  options = {
    debug: false,
    update: false,
    argv: []
  }
  begin
    @opt_parser = OptionParser.new(ARGV) do |opts|
      opts.banner = "Usage: #{$PROGRAM_NAME} [options]"

      opts.on('--site=SITE', String, 'Customer site name (Automatic, if not provided)') do |site|
        options[:site] = site
      end

      opts.on('--distribution=DIST', String, 'Distribution Site (either this, or Subnet_id)') do |dist|
        options[:distribution] = dist
      end

      opts.on('--subnet_id=SUBNET', String, 'subnet id (Either this, or Distribution Site)') do |subnet|
        options[:subnet_id] = subnet
      end

      opts.on('--activate', 'Ensure customer is marked as active') do
        options[:activate] = true
      end

      opts.on('--line=LINE', Integer, 'Optionally shift customer to this line. (Implies --activate') do |line|
        options[:line] = line
        options[:activate] = line > 0
      end

      # No argument, shows at tail.  This will print an options summary.
      opts.on_tail('-h', '--help', 'Show this message') do
        puts opts
        exit
      end

      # Another typical switch to print the version.
      opts.on_tail('-v', '--version', 'Show version') do
        puts VERSION
        exit
      end
    end
    @opt_parser.parse! argv

    if options[:distribution].nil? && options[:site].nil?
      usage
      exit(-1)
    end
  rescue OptionParser::InvalidArgument => e
    puts e
    usage
    exit(-1)
  end
  options[:argv] = argv # Any trailing arguments
  return options
end

def usage
  warn @opt_parser
end

args = parse_args # default to ARGV
if args[:argv].length > 0
  usage
  exit(-1)
end

mysql_conf = WIKK::Configuration.new(MYSQL_CONF)
WIKK::SQL.connect(mysql_conf) do |sql_fd|
  move_customer(sql: sql_fd, dist_site_name: args[:distribution], c_site_name: args[:site], dns_subnet_id: args[:subnet_id], activate: args[:activate], line: args[:line])
end
