#!/usr/local/bin/ruby
require 'wikk_configuration'
require 'wikk_sql'
require 'optparse'
require 'optparse/time'

load '/wikk/etc/wikk.conf' unless defined? WIKK_CONF
require_relative "#{RLIB}/customer/customer.rb"

VERSION = '1.1.0'

def parse_args(argv: ARGV)
  options = {
    debug: false,
    update: false,
    argv: [],
    link: 0,
    lat: -36.988197841057804, # Beach, so at least it is easy to find on the map
    long: 174.47384965188704,
    height: 3                 # Wild guess
  }
  begin
    @opt_parser = OptionParser.new(ARGV) do |opts|
      opts.banner = "Usage: #{$PROGRAM_NAME} [options]"

      opts.on('--site=SITE', '--site_name=SITE', String, 'Customer site name (Automatic, if not provided)') do |site|
        options[:site] = site
      end

      opts.on('--date=DATE', '--connection_date=DATE', String, 'Connection date') do |date|
        options[:date] = date
      end

      opts.on('--address=ADDRESS', '--site_address=ADDRESS', String, 'Site Address') do |address|
        options[:address] = address
      end

      opts.on('--name=NAME', '--customer_name=NAME', String, 'Customer Name') do |name|
        options[:name] = name
      end

      opts.on('--distribution=DIST', String, 'Distribution Site (either this, or Subnet_id)') do |dist|
        options[:distribution] = dist
      end

      opts.on('--subnet_id=SUBNET', String, 'subnet id (Either this, or Distribution Site)') do |subnet|
        options[:subnet_id] = subnet
      end

      opts.on('--phone=PHONE', String, 'Landline Phone Number') do |phone|
        options[:phone] = phone
      end

      opts.on('--mobile=MOBILE', String, 'Customer cell phone') do |mobile|
        options[:mobile] = mobile
      end

      opts.on('--email=EMAIL', String, 'Customer email address') do |email|
        options[:email] = email
      end

      opts.on('--lat=LAT', '--latitude=LAT', String, 'Customer Router Latitude') do |lat|
        options[:lat] = lat
      end

      opts.on('--long=LONG', '--longitude=LONG', String, 'Customer Router Longitude') do |long|
        options[:long] = long
      end

      opts.on('--height=HEIGHT', String, 'Customer Router height above ground') do |height|
        options[:height] = height
      end

      opts.on('--line=LINE', '--link=LINE', String, 'Which external line to use (Automatic, if not provided)') do |line|
        options[:link] = line
      end

      opts.on('--customer_id=CUSTOMER_ID', String, 'Customer id. (Automatic, if not provided)') do |customer_id|
        options[:customer_id] = customer_id
      end

      # No argument, shows at tail.  This will print an options summary.
      opts.on_tail('-h', '--help', 'Show this message') do
        puts opts
        exit
      end

      # Another typical switch to print the version.
      opts.on_tail('-v', '--version', 'Show version') do
        puts VERSION
        exit
      end
    end
    @opt_parser.parse! argv

    if options[:distribution].nil? && options[:subnet_id].nil?
      usage
      exit(-1)
    end
  rescue OptionParser::InvalidArgument => e
    puts e
    usage
    exit(-1)
  end
  options[:argv] = argv # Any trailing arguments
  return options
end

def usage
  warn @opt_parser
end

args = parse_args # default to ARGV
if args[:argv].length > 0
  usage
  exit(-1)
end

@mysql_conf = WIKK::Configuration.new(MYSQL_CONF)
WIKK::SQL.connect(@mysql_conf) do |sql_fd|
  new_customer( sql: sql_fd,
                distribution_site: args[:distribution], # Optional, if subnet_id given
                subnet_id: args[:subnet_id],            # Need this one, if distribution site not given, or have already setup IP addresses
                customer_name: args[:name],             # Really want this one too, but don't always have it
                site_address: args[:address],           # Really want this one as well
                email: args[:email],                    # Useful to have
                mobile: args[:mobile],                  # Useful to have
                telephone: args[:phone],                # Useful to have
                latitude: args[:lat],                   # Useful to have
                longitude: args[:long],                 # Useful to have
                height: args[:height],                  # Default to the beach :)
                site_name: args[:site],                 # generated automatically if nil
                link: args[:link],                      # generated automatically if nil
                customer_id: args[:customer_id],        # generated automatically if nil
                connected: args[:date]                  # Defaults to today
              )
end
